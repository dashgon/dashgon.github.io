{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MasonryHeader","props","react_default","a","createElement","className","title","sub","MasonryItem","diffHrs","dt","Date","publishedAt","lZ","n","toString","bgc","Math","ceil","now","getTime","concat","mo_dd","en","getMonth","getDate","href","url","target","rel","style","backgroundColor","getHours","getMinutes","src","urlToImage","alt","source","name","author","description","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","contents","setContents","_React$useState3","_React$useState4","country","setCountry","useEffect","req","Request","fetch","then","response","json","catch","console","error","log","CBtn","co","background","undefined","type","onClick","role","aria-label","gb","fr","de","in","sg","cn","kr","jp","au","us","ca","isWestern","includes","App_MasonryHeader","articles","map","cts","i","App_MasonryItem","assign","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fac7afbb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst MasonryHeader = props =>\n  <div className=\"masonry-header\">{props.title}\n    <span className=\"masonry-header-sub\">{props.sub}</span>\n  </div>;\n\nconst MasonryItem = props => {\n  const getBkColor = diffHrs => {\n    if (diffHrs <= 3) {\n      return `rgba(231, 76, 60, ${.4+.6*(3-diffHrs)/3})`\n    } else if (diffHrs <= 6) {\n      return `rgba(0, 100, 0, .6)`\n    } else if (diffHrs <= 12) {\n      return `rgba(0, 0, 100, .6)`\n    } else {\n      return `rgba(0, 0, 0, .6)`\n    }\n  };\n  const mon_name = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const dt = new Date(props.publishedAt);\n  const lZ = n => (n < 10) ? '0' + n : n.toString();\n  const bgc = getBkColor(Math.ceil(( Date.now() - dt.getTime() ) / (1000 * 60 * 60)));\n  const mo_dd = (props.en ? (mon_name[dt.getMonth()] + ' ') : ((dt.getMonth()+1) + '/') ) + dt.getDate();\n\n  return (\n    <div className=\"masonry-item\">\n      <div className=\"masonry-content\">\n        <div className=\"masonry-img\">\n          <a href={props.url} target=\"_blank\" rel=\"noopener noreferrer\">\n            <div className=\"date-stamp\" style={{backgroundColor: bgc}}>\n              <div className=\"date-hh-mm\">{lZ(dt.getHours()) + ':' + lZ(dt.getMinutes())}</div>\n              <div className=\"date-mo-dd\">{mo_dd}</div>\n            </div>\n            <img src={props.urlToImage} alt=\"\" />\n          </a>\n        </div>\n        <div className=\"masonry-text\">\n          <h3 className=\"masonry-title\">\n            {props.source.name &&\n              <div className=\"masonry-nb tooltip\">{props.source.name}\n                {props.author && <span className=\"tooltiptext\">{props.author}</span>}\n              </div>}\n            {props.title}\n          </h3>\n          <p className=\"masonry-description\">{props.description}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// ES2018 property spread notation {...props}\nconst App = () => {\n  //console.log(id, \"items\");\n  const [contents, setContents] = React.useState(null);\n  const [country,  setCountry]  = React.useState('us');\n\n  React.useEffect(() => {\n    const url = 'https://newsapi.org/v2/top-headlines?' +\n              'country=' + country + '&' +\n              'apiKey=2df259c96a4b405fbb75e14986f3c1f5'; //  fd3137543cde4878a4ab77aebe5bc94c\n    const req = new Request(url);\n    fetch(req)\n      .then(response => {\n        return response.json();\n      })\n      .then(setContents)\n      .catch(() => console.error(\"fetch error!\"));\n  }, [country]);\n\n  if (contents)\n    console.log(contents);\n\n  const CBtn = props => {\n    const flag = {\n      \"gb\": \"ðŸ‡¬ðŸ‡§\",\n      \"fr\": \"ðŸ‡«ðŸ‡·\",\n      \"de\": \"ðŸ‡©ðŸ‡ª\",\n      \"in\": \"ðŸ‡®ðŸ‡³\",\n      \"sg\": \"ðŸ‡¸ðŸ‡¬\",\n      \"cn\": \"ðŸ‡¨ðŸ‡³\",\n      \"kr\": \"ðŸ‡°ðŸ‡·\",\n      \"jp\": \"ðŸ‡¯ðŸ‡µ\",\n      \"au\": \"ðŸ‡¦ðŸ‡º\",\n      \"us\": \"ðŸ‡ºðŸ‡¸\",\n      \"ca\": \"ðŸ‡¨ðŸ‡¦\",\n    };\n    const style = (props.co === country) ? {background: \"Khaki\"} : undefined;\n    return <button type=\"button\"\n                   onClick={()=>setCountry(props.co)}\n                   className=\"btn-ctr\"\n                   style={style}\n                 >\n        <span role=\"img\" aria-label={props.co}>{flag[props.co]}</span>\n      </button>;\n  }\n  // disabled={country === props.co}\n\n  const isWestern = ![\"ch\", \"kr\", \"jp\"].includes(country);\n\n  return (contents &&\n    <div className=\"App\">\n      <div className=\"btn-cont\">\n        <MasonryHeader title=\"NEWS\" sub=\"\" />\n        <CBtn co=\"gb\" />\n        <CBtn co=\"fr\" />\n        <CBtn co=\"de\" />\n        <CBtn co=\"in\" />\n        <CBtn co=\"sg\" />\n        <CBtn co=\"cn\" />\n        <CBtn co=\"kr\" />\n        <CBtn co=\"jp\" />\n        <CBtn co=\"au\" />\n        <CBtn co=\"us\" />\n        <CBtn co=\"ca\" />\n      </div>\n      <div className=\"masonry-wrapper\">\n        <div className=\"masonry\">\n          { contents.articles.map((cts, i) => <MasonryItem key={i} en={isWestern} {...cts} /> ) }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n/*\n *\n    const url = 'https://newsapi.org/v2/everything?' + // top-headlines?' +\n              'q=market&' + //'country=jp&' +\n              'apiKey=fd3137543cde4878a4ab77aebe5bc94c';\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}